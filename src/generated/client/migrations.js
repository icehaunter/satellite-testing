export default [
  {
    "statements": [
      "CREATE TABLE \"sessions\" (\n  \"id\" TEXT NOT NULL,\n  \"inserted_at\" TEXT NOT NULL,\n  CONSTRAINT \"sessions_pkey\" PRIMARY KEY (\"id\")\n) WITHOUT ROWID;\n",
      "CREATE TABLE \"users\" (\n  \"id\" TEXT NOT NULL,\n  \"session_id\" TEXT NOT NULL,\n  CONSTRAINT \"users_session_id_fkey\" FOREIGN KEY (\"session_id\") REFERENCES \"sessions\" (\"id\") ON DELETE CASCADE,\n  CONSTRAINT \"users_pkey\" PRIMARY KEY (\"id\")\n) WITHOUT ROWID;\n",
      "CREATE TABLE \"demos\" (\n  \"id\" TEXT NOT NULL,\n  \"name\" TEXT NOT NULL,\n  \"session_id\" TEXT NOT NULL,\n  CONSTRAINT \"demos_session_id_fkey\" FOREIGN KEY (\"session_id\") REFERENCES \"sessions\" (\"id\") ON DELETE CASCADE,\n  CONSTRAINT \"demos_pkey\" PRIMARY KEY (\"id\")\n) WITHOUT ROWID;\n",
      "CREATE TABLE \"sliders\" (\n  \"id\" TEXT NOT NULL,\n  \"value\" INTEGER NOT NULL,\n  \"demo_id\" TEXT NOT NULL,\n  CONSTRAINT \"sliders_demo_id_fkey\" FOREIGN KEY (\"demo_id\") REFERENCES \"demos\" (\"id\") ON DELETE CASCADE,\n  CONSTRAINT \"sliders_pkey\" PRIMARY KEY (\"id\")\n) WITHOUT ROWID;\n",
      "CREATE TABLE \"items\" (\n  \"id\" TEXT NOT NULL,\n  \"demo_id\" TEXT NOT NULL,\n  \"inserted_at\" TEXT NOT NULL,\n  CONSTRAINT \"items_demo_id_fkey\" FOREIGN KEY (\"demo_id\") REFERENCES \"demos\" (\"id\") ON DELETE CASCADE,\n  CONSTRAINT \"items_pkey\" PRIMARY KEY (\"id\")\n) WITHOUT ROWID;\n",
      "CREATE TABLE \"players\" (\n  \"id\" TEXT NOT NULL,\n  \"color\" TEXT NOT NULL,\n  \"demo_id\" TEXT NOT NULL,\n  \"tournament_id\" TEXT,\n  \"inserted_at\" TEXT NOT NULL,\n  \"updated_at\" TEXT NOT NULL,\n  CONSTRAINT \"players_demo_id_fkey\" FOREIGN KEY (\"demo_id\") REFERENCES \"demos\" (\"id\") ON DELETE CASCADE,\n  CONSTRAINT \"players_tournament_id_fkey\" FOREIGN KEY (\"tournament_id\") REFERENCES \"tournaments\" (\"id\") ON DELETE SET NULL,\n  CONSTRAINT \"players_pkey\" PRIMARY KEY (\"id\")\n) WITHOUT ROWID;\n",
      "CREATE TABLE \"tournaments\" (\n  \"id\" TEXT NOT NULL,\n  \"name\" TEXT NOT NULL,\n  \"demo_id\" TEXT NOT NULL,\n  \"inserted_at\" TEXT NOT NULL,\n  CONSTRAINT \"tournaments_demo_id_fkey\" FOREIGN KEY (\"demo_id\") REFERENCES \"demos\" (\"id\") ON DELETE CASCADE,\n  CONSTRAINT \"tournaments_pkey\" PRIMARY KEY (\"id\")\n) WITHOUT ROWID;\n",
      "\n    -- Toggles for turning the triggers on and off\n    INSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.sessions', 1);\n    ",
      "\n    /* Triggers for table sessions */\n  \n    -- ensures primary key is immutable\n    DROP TRIGGER IF EXISTS update_ensure_main_sessions_primarykey;\n    ",
      "\n    CREATE TRIGGER update_ensure_main_sessions_primarykey\n      BEFORE UPDATE ON main.sessions\n    BEGIN\n      SELECT\n        CASE\n          WHEN old.id != new.id THEN\n\t\tRAISE (ABORT, 'cannot change the value of column id as it belongs to the primary key')\n        END;\n    END;\n    ",
      "\n    -- Triggers that add INSERT, UPDATE, DELETE operation to the _opslog table\n    DROP TRIGGER IF EXISTS insert_main_sessions_into_oplog;\n    ",
      "\n    CREATE TRIGGER insert_main_sessions_into_oplog\n       AFTER INSERT ON main.sessions\n       WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.sessions')\n    BEGIN\n      INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n      VALUES ('main', 'sessions', 'INSERT', json_object('id', new.id), json_object('id', new.id, 'inserted_at', new.inserted_at), NULL, NULL);\n    END;\n    ",
      "\n    DROP TRIGGER IF EXISTS update_main_sessions_into_oplog;\n    ",
      "\n    CREATE TRIGGER update_main_sessions_into_oplog\n       AFTER UPDATE ON main.sessions\n       WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.sessions')\n    BEGIN\n      INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n      VALUES ('main', 'sessions', 'UPDATE', json_object('id', new.id), json_object('id', new.id, 'inserted_at', new.inserted_at), json_object('id', old.id, 'inserted_at', old.inserted_at), NULL);\n    END;\n    ",
      "\n    DROP TRIGGER IF EXISTS delete_main_sessions_into_oplog;\n    ",
      "\n    CREATE TRIGGER delete_main_sessions_into_oplog\n       AFTER DELETE ON main.sessions\n       WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.sessions')\n    BEGIN\n      INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n      VALUES ('main', 'sessions', 'DELETE', json_object('id', old.id), NULL, json_object('id', old.id, 'inserted_at', old.inserted_at), NULL);\n    END;\n    ",
      "\n    -- Toggles for turning the triggers on and off\n    INSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.users', 1);\n    ",
      "\n    /* Triggers for table users */\n  \n    -- ensures primary key is immutable\n    DROP TRIGGER IF EXISTS update_ensure_main_users_primarykey;\n    ",
      "\n    CREATE TRIGGER update_ensure_main_users_primarykey\n      BEFORE UPDATE ON main.users\n    BEGIN\n      SELECT\n        CASE\n          WHEN old.id != new.id THEN\n\t\tRAISE (ABORT, 'cannot change the value of column id as it belongs to the primary key')\n        END;\n    END;\n    ",
      "\n    -- Triggers that add INSERT, UPDATE, DELETE operation to the _opslog table\n    DROP TRIGGER IF EXISTS insert_main_users_into_oplog;\n    ",
      "\n    CREATE TRIGGER insert_main_users_into_oplog\n       AFTER INSERT ON main.users\n       WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.users')\n    BEGIN\n      INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n      VALUES ('main', 'users', 'INSERT', json_object('id', new.id), json_object('id', new.id, 'session_id', new.session_id), NULL, NULL);\n    END;\n    ",
      "\n    DROP TRIGGER IF EXISTS update_main_users_into_oplog;\n    ",
      "\n    CREATE TRIGGER update_main_users_into_oplog\n       AFTER UPDATE ON main.users\n       WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.users')\n    BEGIN\n      INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n      VALUES ('main', 'users', 'UPDATE', json_object('id', new.id), json_object('id', new.id, 'session_id', new.session_id), json_object('id', old.id, 'session_id', old.session_id), NULL);\n    END;\n    ",
      "\n    DROP TRIGGER IF EXISTS delete_main_users_into_oplog;\n    ",
      "\n    CREATE TRIGGER delete_main_users_into_oplog\n       AFTER DELETE ON main.users\n       WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.users')\n    BEGIN\n      INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n      VALUES ('main', 'users', 'DELETE', json_object('id', old.id), NULL, json_object('id', old.id, 'session_id', old.session_id), NULL);\n    END;\n    ",
      "\n    -- Toggles for turning the triggers on and off\n    INSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.demos', 1);\n    ",
      "\n    /* Triggers for table demos */\n  \n    -- ensures primary key is immutable\n    DROP TRIGGER IF EXISTS update_ensure_main_demos_primarykey;\n    ",
      "\n    CREATE TRIGGER update_ensure_main_demos_primarykey\n      BEFORE UPDATE ON main.demos\n    BEGIN\n      SELECT\n        CASE\n          WHEN old.id != new.id THEN\n\t\tRAISE (ABORT, 'cannot change the value of column id as it belongs to the primary key')\n        END;\n    END;\n    ",
      "\n    -- Triggers that add INSERT, UPDATE, DELETE operation to the _opslog table\n    DROP TRIGGER IF EXISTS insert_main_demos_into_oplog;\n    ",
      "\n    CREATE TRIGGER insert_main_demos_into_oplog\n       AFTER INSERT ON main.demos\n       WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.demos')\n    BEGIN\n      INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n      VALUES ('main', 'demos', 'INSERT', json_object('id', new.id), json_object('id', new.id, 'name', new.name, 'session_id', new.session_id), NULL, NULL);\n    END;\n    ",
      "\n    DROP TRIGGER IF EXISTS update_main_demos_into_oplog;\n    ",
      "\n    CREATE TRIGGER update_main_demos_into_oplog\n       AFTER UPDATE ON main.demos\n       WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.demos')\n    BEGIN\n      INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n      VALUES ('main', 'demos', 'UPDATE', json_object('id', new.id), json_object('id', new.id, 'name', new.name, 'session_id', new.session_id), json_object('id', old.id, 'name', old.name, 'session_id', old.session_id), NULL);\n    END;\n    ",
      "\n    DROP TRIGGER IF EXISTS delete_main_demos_into_oplog;\n    ",
      "\n    CREATE TRIGGER delete_main_demos_into_oplog\n       AFTER DELETE ON main.demos\n       WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.demos')\n    BEGIN\n      INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n      VALUES ('main', 'demos', 'DELETE', json_object('id', old.id), NULL, json_object('id', old.id, 'name', old.name, 'session_id', old.session_id), NULL);\n    END;\n    ",
      "\n    -- Toggles for turning the triggers on and off\n    INSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.sliders', 1);\n    ",
      "\n    /* Triggers for table sliders */\n  \n    -- ensures primary key is immutable\n    DROP TRIGGER IF EXISTS update_ensure_main_sliders_primarykey;\n    ",
      "\n    CREATE TRIGGER update_ensure_main_sliders_primarykey\n      BEFORE UPDATE ON main.sliders\n    BEGIN\n      SELECT\n        CASE\n          WHEN old.id != new.id THEN\n\t\tRAISE (ABORT, 'cannot change the value of column id as it belongs to the primary key')\n        END;\n    END;\n    ",
      "\n    -- Triggers that add INSERT, UPDATE, DELETE operation to the _opslog table\n    DROP TRIGGER IF EXISTS insert_main_sliders_into_oplog;\n    ",
      "\n    CREATE TRIGGER insert_main_sliders_into_oplog\n       AFTER INSERT ON main.sliders\n       WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.sliders')\n    BEGIN\n      INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n      VALUES ('main', 'sliders', 'INSERT', json_object('id', new.id), json_object('id', new.id, 'value', new.value, 'demo_id', new.demo_id), NULL, NULL);\n    END;\n    ",
      "\n    DROP TRIGGER IF EXISTS update_main_sliders_into_oplog;\n    ",
      "\n    CREATE TRIGGER update_main_sliders_into_oplog\n       AFTER UPDATE ON main.sliders\n       WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.sliders')\n    BEGIN\n      INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n      VALUES ('main', 'sliders', 'UPDATE', json_object('id', new.id), json_object('id', new.id, 'value', new.value, 'demo_id', new.demo_id), json_object('id', old.id, 'value', old.value, 'demo_id', old.demo_id), NULL);\n    END;\n    ",
      "\n    DROP TRIGGER IF EXISTS delete_main_sliders_into_oplog;\n    ",
      "\n    CREATE TRIGGER delete_main_sliders_into_oplog\n       AFTER DELETE ON main.sliders\n       WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.sliders')\n    BEGIN\n      INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n      VALUES ('main', 'sliders', 'DELETE', json_object('id', old.id), NULL, json_object('id', old.id, 'value', old.value, 'demo_id', old.demo_id), NULL);\n    END;\n    ",
      "\n    -- Toggles for turning the triggers on and off\n    INSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.items', 1);\n    ",
      "\n    /* Triggers for table items */\n  \n    -- ensures primary key is immutable\n    DROP TRIGGER IF EXISTS update_ensure_main_items_primarykey;\n    ",
      "\n    CREATE TRIGGER update_ensure_main_items_primarykey\n      BEFORE UPDATE ON main.items\n    BEGIN\n      SELECT\n        CASE\n          WHEN old.id != new.id THEN\n\t\tRAISE (ABORT, 'cannot change the value of column id as it belongs to the primary key')\n        END;\n    END;\n    ",
      "\n    -- Triggers that add INSERT, UPDATE, DELETE operation to the _opslog table\n    DROP TRIGGER IF EXISTS insert_main_items_into_oplog;\n    ",
      "\n    CREATE TRIGGER insert_main_items_into_oplog\n       AFTER INSERT ON main.items\n       WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.items')\n    BEGIN\n      INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n      VALUES ('main', 'items', 'INSERT', json_object('id', new.id), json_object('id', new.id, 'demo_id', new.demo_id, 'inserted_at', new.inserted_at), NULL, NULL);\n    END;\n    ",
      "\n    DROP TRIGGER IF EXISTS update_main_items_into_oplog;\n    ",
      "\n    CREATE TRIGGER update_main_items_into_oplog\n       AFTER UPDATE ON main.items\n       WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.items')\n    BEGIN\n      INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n      VALUES ('main', 'items', 'UPDATE', json_object('id', new.id), json_object('id', new.id, 'demo_id', new.demo_id, 'inserted_at', new.inserted_at), json_object('id', old.id, 'demo_id', old.demo_id, 'inserted_at', old.inserted_at), NULL);\n    END;\n    ",
      "\n    DROP TRIGGER IF EXISTS delete_main_items_into_oplog;\n    ",
      "\n    CREATE TRIGGER delete_main_items_into_oplog\n       AFTER DELETE ON main.items\n       WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.items')\n    BEGIN\n      INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n      VALUES ('main', 'items', 'DELETE', json_object('id', old.id), NULL, json_object('id', old.id, 'demo_id', old.demo_id, 'inserted_at', old.inserted_at), NULL);\n    END;\n    ",
      "\n    -- Toggles for turning the triggers on and off\n    INSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.players', 1);\n    ",
      "\n    /* Triggers for table players */\n  \n    -- ensures primary key is immutable\n    DROP TRIGGER IF EXISTS update_ensure_main_players_primarykey;\n    ",
      "\n    CREATE TRIGGER update_ensure_main_players_primarykey\n      BEFORE UPDATE ON main.players\n    BEGIN\n      SELECT\n        CASE\n          WHEN old.id != new.id THEN\n\t\tRAISE (ABORT, 'cannot change the value of column id as it belongs to the primary key')\n        END;\n    END;\n    ",
      "\n    -- Triggers that add INSERT, UPDATE, DELETE operation to the _opslog table\n    DROP TRIGGER IF EXISTS insert_main_players_into_oplog;\n    ",
      "\n    CREATE TRIGGER insert_main_players_into_oplog\n       AFTER INSERT ON main.players\n       WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.players')\n    BEGIN\n      INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n      VALUES ('main', 'players', 'INSERT', json_object('id', new.id), json_object('id', new.id, 'color', new.color, 'demo_id', new.demo_id, 'tournament_id', new.tournament_id, 'inserted_at', new.inserted_at, 'updated_at', new.updated_at), NULL, NULL);\n    END;\n    ",
      "\n    DROP TRIGGER IF EXISTS update_main_players_into_oplog;\n    ",
      "\n    CREATE TRIGGER update_main_players_into_oplog\n       AFTER UPDATE ON main.players\n       WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.players')\n    BEGIN\n      INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n      VALUES ('main', 'players', 'UPDATE', json_object('id', new.id), json_object('id', new.id, 'color', new.color, 'demo_id', new.demo_id, 'tournament_id', new.tournament_id, 'inserted_at', new.inserted_at, 'updated_at', new.updated_at), json_object('id', old.id, 'color', old.color, 'demo_id', old.demo_id, 'tournament_id', old.tournament_id, 'inserted_at', old.inserted_at, 'updated_at', old.updated_at), NULL);\n    END;\n    ",
      "\n    DROP TRIGGER IF EXISTS delete_main_players_into_oplog;\n    ",
      "\n    CREATE TRIGGER delete_main_players_into_oplog\n       AFTER DELETE ON main.players\n       WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.players')\n    BEGIN\n      INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n      VALUES ('main', 'players', 'DELETE', json_object('id', old.id), NULL, json_object('id', old.id, 'color', old.color, 'demo_id', old.demo_id, 'tournament_id', old.tournament_id, 'inserted_at', old.inserted_at, 'updated_at', old.updated_at), NULL);\n    END;\n    ",
      "\n    -- Toggles for turning the triggers on and off\n    INSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.tournaments', 1);\n    ",
      "\n    /* Triggers for table tournaments */\n  \n    -- ensures primary key is immutable\n    DROP TRIGGER IF EXISTS update_ensure_main_tournaments_primarykey;\n    ",
      "\n    CREATE TRIGGER update_ensure_main_tournaments_primarykey\n      BEFORE UPDATE ON main.tournaments\n    BEGIN\n      SELECT\n        CASE\n          WHEN old.id != new.id THEN\n\t\tRAISE (ABORT, 'cannot change the value of column id as it belongs to the primary key')\n        END;\n    END;\n    ",
      "\n    -- Triggers that add INSERT, UPDATE, DELETE operation to the _opslog table\n    DROP TRIGGER IF EXISTS insert_main_tournaments_into_oplog;\n    ",
      "\n    CREATE TRIGGER insert_main_tournaments_into_oplog\n       AFTER INSERT ON main.tournaments\n       WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.tournaments')\n    BEGIN\n      INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n      VALUES ('main', 'tournaments', 'INSERT', json_object('id', new.id), json_object('id', new.id, 'name', new.name, 'demo_id', new.demo_id, 'inserted_at', new.inserted_at), NULL, NULL);\n    END;\n    ",
      "\n    DROP TRIGGER IF EXISTS update_main_tournaments_into_oplog;\n    ",
      "\n    CREATE TRIGGER update_main_tournaments_into_oplog\n       AFTER UPDATE ON main.tournaments\n       WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.tournaments')\n    BEGIN\n      INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n      VALUES ('main', 'tournaments', 'UPDATE', json_object('id', new.id), json_object('id', new.id, 'name', new.name, 'demo_id', new.demo_id, 'inserted_at', new.inserted_at), json_object('id', old.id, 'name', old.name, 'demo_id', old.demo_id, 'inserted_at', old.inserted_at), NULL);\n    END;\n    ",
      "\n    DROP TRIGGER IF EXISTS delete_main_tournaments_into_oplog;\n    ",
      "\n    CREATE TRIGGER delete_main_tournaments_into_oplog\n       AFTER DELETE ON main.tournaments\n       WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.tournaments')\n    BEGIN\n      INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n      VALUES ('main', 'tournaments', 'DELETE', json_object('id', old.id), NULL, json_object('id', old.id, 'name', old.name, 'demo_id', old.demo_id, 'inserted_at', old.inserted_at), NULL);\n    END;\n    "
    ],
    "version": "20230726081747_587"
  }
]